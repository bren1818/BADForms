<?php
/*  Class Generated by Brendon Irwin's Class Generator

	type, i
	label, v
	name, v
	default, v
	errorText, v
	placeholder, v
	regex, v
	minValue, i
	maxValue, i
	minLength, i
	maxLength, i
	classes, v
	required, i
	encrypted, i
	formID, i
	order, i

*/

	class Formobject{
		private $id;
		private $connection;
		private $errors;
		private $errorCount;
		private $type;
		private $label;
		private $name;
		private $default;
		private $errorText;
		private $placeholder;
		private $regex;
		private $minValue;
		private $maxValue;
		private $minLength;
		private $maxLength;
		private $classes;
		private $required;
		private $encrypted;
		private $formID;
		private $order;


		/*Constructor*/
		function __construct($databaseConnection=null){
			$this->connection = $databaseConnection;
		}

		/*Getters and Setters*/
		function getId(){
			return $this->id;
		}

		function setId($id){
			$this->id = $id;
		}

		function getConnection(){
			return $this->connection;
		}

		function setConnection($connection){
			$this->connection = $connection;
		}

		function getErrors(){
			return $this->errors;
		}

		function setErrors($errors){
			$this->errors = $errors;
		}

		function getErrorCount(){
			return $this->errorCount;
		}

		function setErrorCount($errorCount){
			$this->errorCount = $errorCount;
		}

		function getType(){
			return $this->type;
		}

		function setType($type){
			$this->type = $type;
		}

		function getLabel(){
			return $this->label;
		}

		function setLabel($label){
			$this->label = $label;
		}

		function getName(){
			return $this->name;
		}

		function setName($name){
			$this->name = $name;
		}

		function getDefault(){
			return $this->default;
		}

		function setDefault($default){
			$this->default = $default;
		}

		function getErrorText(){
			return $this->errorText;
		}

		function setErrorText($errorText){
			$this->errorText = $errorText;
		}

		function getPlaceholder(){
			return $this->placeholder;
		}

		function setPlaceholder($placeholder){
			$this->placeholder = $placeholder;
		}

		function getRegex(){
			return $this->regex;
		}

		function setRegex($regex){
			$this->regex = $regex;
		}

		function getMinValue(){
			return $this->minValue;
		}

		function setMinValue($minValue){
			$this->minValue = $minValue;
		}

		function getMaxValue(){
			return $this->maxValue;
		}

		function setMaxValue($maxValue){
			$this->maxValue = $maxValue;
		}

		function getMinLength(){
			return $this->minLength;
		}

		function setMinLength($minLength){
			$this->minLength = $minLength;
		}

		function getMaxLength(){
			return $this->maxLength;
		}

		function setMaxLength($maxLength){
			$this->maxLength = $maxLength;
		}

		function getClasses(){
			return $this->classes;
		}

		function setClasses($classes){
			$this->classes = $classes;
		}

		function getRequired(){
			return $this->required;
		}

		function setRequired($required){
			$this->required = $required;
		}

		function getEncrypted(){
			return $this->encrypted;
		}

		function setEncrypted($encrypted){
			$this->encrypted = $encrypted;
		}

		function getFormID(){
			return $this->formID;
		}

		function setFormID($formID){
			$this->formID = $formID;
		}

		function getOrder(){
			return $this->order;
		}

		function setOrder($order){
			$this->order = $order;
		}

		/*Special Functions*/
		function load($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						$formobject = $query->fetchObject("formobject");
					}
					if( is_object( $formobject ) ){
						$formobject->setConnection( $this->connection );
					}
					return $formobject;
				}
			}
		}

		function getFromPost(){
			$this->setType( (isset($_POST["type"])) ? $_POST["type"] : $this->getType() );
			$this->setLabel( (isset($_POST["label"])) ? $_POST["label"] : $this->getLabel() );
			$this->setName( (isset($_POST["name"])) ? $_POST["name"] : $this->getName() );
			$this->setDefault( (isset($_POST["default"])) ? $_POST["default"] : $this->getDefault() );
			$this->setErrorText( (isset($_POST["errorText"])) ? $_POST["errorText"] : $this->getErrorText() );
			$this->setPlaceholder( (isset($_POST["placeholder"])) ? $_POST["placeholder"] : $this->getPlaceholder() );
			$this->setRegex( (isset($_POST["regex"])) ? $_POST["regex"] : $this->getRegex() );
			$this->setMinValue( (isset($_POST["minValue"])) ? $_POST["minValue"] : $this->getMinValue() );
			$this->setMaxValue( (isset($_POST["maxValue"])) ? $_POST["maxValue"] : $this->getMaxValue() );
			$this->setMinLength( (isset($_POST["minLength"])) ? $_POST["minLength"] : $this->getMinLength() );
			$this->setMaxLength( (isset($_POST["maxLength"])) ? $_POST["maxLength"] : $this->getMaxLength() );
			$this->setClasses( (isset($_POST["classes"])) ? $_POST["classes"] : $this->getClasses() );
			$this->setRequired( (isset($_POST["required"])) ? $_POST["required"] : $this->getRequired() );
			$this->setEncrypted( (isset($_POST["encrypted"])) ? $_POST["encrypted"] : $this->getEncrypted() );
			$this->setFormID( (isset($_POST["formID"])) ? $_POST["formID"] : $this->getFormID() );
			$this->setOrder( (isset($_POST["order"])) ? $_POST["order"] : $this->getOrder() );
		}

		function getFromRequest(){
			$this->setType( (isset($_REQUEST["type"])) ? $_REQUEST["type"] : $this->getType() );
			$this->setLabel( (isset($_REQUEST["label"])) ? $_REQUEST["label"] : $this->getLabel() );
			$this->setName( (isset($_REQUEST["name"])) ? $_REQUEST["name"] : $this->getName() );
			$this->setDefault( (isset($_REQUEST["default"])) ? $_REQUEST["default"] : $this->getDefault() );
			$this->setErrorText( (isset($_REQUEST["errorText"])) ? $_REQUEST["errorText"] : $this->getErrorText() );
			$this->setPlaceholder( (isset($_REQUEST["placeholder"])) ? $_REQUEST["placeholder"] : $this->getPlaceholder() );
			$this->setRegex( (isset($_REQUEST["regex"])) ? $_REQUEST["regex"] : $this->getRegex() );
			$this->setMinValue( (isset($_REQUEST["minValue"])) ? $_REQUEST["minValue"] : $this->getMinValue() );
			$this->setMaxValue( (isset($_REQUEST["maxValue"])) ? $_REQUEST["maxValue"] : $this->getMaxValue() );
			$this->setMinLength( (isset($_REQUEST["minLength"])) ? $_REQUEST["minLength"] : $this->getMinLength() );
			$this->setMaxLength( (isset($_REQUEST["maxLength"])) ? $_REQUEST["maxLength"] : $this->getMaxLength() );
			$this->setClasses( (isset($_REQUEST["classes"])) ? $_REQUEST["classes"] : $this->getClasses() );
			$this->setRequired( (isset($_REQUEST["required"])) ? $_REQUEST["required"] : $this->getRequired() );
			$this->setEncrypted( (isset($_REQUEST["encrypted"])) ? $_REQUEST["encrypted"] : $this->getEncrypted() );
			$this->setFormID( (isset($_REQUEST["formID"])) ? $_REQUEST["formID"] : $this->getFormID() );
			$this->setOrder( (isset($_REQUEST["order"])) ? $_REQUEST["order"] : $this->getOrder() );
		}

		function getFromArray($arr){
			$this->setType( (isset($arr["type"])) ? $arr["type"] : $this->getType() );
			$this->setLabel( (isset($arr["label"])) ? $arr["label"] : $this->getLabel() );
			$this->setName( (isset($arr["name"])) ? $arr["name"] : $this->getName() );
			$this->setDefault( (isset($arr["default"])) ? $arr["default"] : $this->getDefault() );
			$this->setErrorText( (isset($arr["errorText"])) ? $arr["errorText"] : $this->getErrorText() );
			$this->setPlaceholder( (isset($arr["placeholder"])) ? $arr["placeholder"] : $this->getPlaceholder() );
			$this->setRegex( (isset($arr["regex"])) ? $arr["regex"] : $this->getRegex() );
			$this->setMinValue( (isset($arr["minValue"])) ? $arr["minValue"] : $this->getMinValue() );
			$this->setMaxValue( (isset($arr["maxValue"])) ? $arr["maxValue"] : $this->getMaxValue() );
			$this->setMinLength( (isset($arr["minLength"])) ? $arr["minLength"] : $this->getMinLength() );
			$this->setMaxLength( (isset($arr["maxLength"])) ? $arr["maxLength"] : $this->getMaxLength() );
			$this->setClasses( (isset($arr["classes"])) ? $arr["classes"] : $this->getClasses() );
			$this->setRequired( (isset($arr["required"])) ? $arr["required"] : $this->getRequired() );
			$this->setEncrypted( (isset($arr["encrypted"])) ? $arr["encrypted"] : $this->getEncrypted() );
			$this->setFormID( (isset($arr["formID"])) ? $arr["formID"] : $this->getFormID() );
			$this->setOrder( (isset($arr["order"])) ? $arr["order"] : $this->getOrder() );
		}

		function save(){
			$id = $this->getId();
			$type = $this->getType();
			$label = $this->getLabel();
			$name = $this->getName();
			$default = $this->getDefault();
			$errorText = $this->getErrorText();
			$placeholder = $this->getPlaceholder();
			$regex = $this->getRegex();
			$minValue = $this->getMinValue();
			$maxValue = $this->getMaxValue();
			$minLength = $this->getMinLength();
			$maxLength = $this->getMaxLength();
			$classes = $this->getClasses();
			$required = $this->getRequired();
			$encrypted = $this->getEncrypted();
			$formID = $this->getFormID();
			$order = $this->getOrder();
			if( $this->connection ){
				if( $id != "" ){
					/*Perform Update Operation*/
					$query = $this->connection->prepare("UPDATE  `formobject` SET `type` = :type ,`label` = :label ,`name` = :name ,`default` = :default ,`errorText` = :errorText ,`placeholder` = :placeholder ,`regex` = :regex ,`minValue` = :minValue ,`maxValue` = :maxValue ,`minLength` = :minLength ,`maxLength` = :maxLength ,`classes` = :classes ,`required` = :required ,`encrypted` = :encrypted ,`formID` = :formID ,`order` = :order WHERE `id` = :id");
					$query->bindParam('type', $type);
					$query->bindParam('label', $label);
					$query->bindParam('name', $name);
					$query->bindParam('default', $default);
					$query->bindParam('errorText', $errorText);
					$query->bindParam('placeholder', $placeholder);
					$query->bindParam('regex', $regex);
					$query->bindParam('minValue', $minValue);
					$query->bindParam('maxValue', $maxValue);
					$query->bindParam('minLength', $minLength);
					$query->bindParam('maxLength', $maxLength);
					$query->bindParam('classes', $classes);
					$query->bindParam('required', $required);
					$query->bindParam('encrypted', $encrypted);
					$query->bindParam('formID', $formID);
					$query->bindParam('order', $order);
					$query->bindParam('id', $id);
					if( $query->execute() ){
						return $id;
					}else{
						return -1;
					}

				}else{
					/*Perform Insert Operation*/
					$query = $this->connection->prepare("INSERT INTO `formobject` (`id`,`type`,`label`,`name`,`default`,`errorText`,`placeholder`,`regex`,`minValue`,`maxValue`,`minLength`,`maxLength`,`classes`,`required`,`encrypted`,`formID`,`order`) VALUES (NULL,:type,:label,:name,:default,:errorText,:placeholder,:regex,:minValue,:maxValue,:minLength,:maxLength,:classes,:required,:encrypted,:formID,:order);");
					$query->bindParam(':type', $type);
					$query->bindParam(':label', $label);
					$query->bindParam(':name', $name);
					$query->bindParam(':default', $default);
					$query->bindParam(':errorText', $errorText);
					$query->bindParam(':placeholder', $placeholder);
					$query->bindParam(':regex', $regex);
					$query->bindParam(':minValue', $minValue);
					$query->bindParam(':maxValue', $maxValue);
					$query->bindParam(':minLength', $minLength);
					$query->bindParam(':maxLength', $maxLength);
					$query->bindParam(':classes', $classes);
					$query->bindParam(':required', $required);
					$query->bindParam(':encrypted', $encrypted);
					$query->bindParam(':formID', $formID);
					$query->bindParam(':order', $order);

					if( $query->execute() ){
						$this->setId( $this->connection->lastInsertId() );
						return $this->getId();
					}else{
						return -1;
					}	
				}
			}
		}


		function delete($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("DELETE FROM `formobject` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						return 1;
					}else{
						return 0;
					}
				}
			}
		}

		function getById($id){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `id` = :id LIMIT 1");
				$query->bindParam(':id', $id);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByType($type){
			if( $this->connection ){
				if( $type == null && $this->getType() != ""){
					$type = $this->getType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `type` = :type LIMIT 1");
				$query->bindParam(':type', $type);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByLabel($label){
			if( $this->connection ){
				if( $label == null && $this->getLabel() != ""){
					$label = $this->getLabel();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `label` = :label LIMIT 1");
				$query->bindParam(':label', $label);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByName($name){
			if( $this->connection ){
				if( $name == null && $this->getName() != ""){
					$name = $this->getName();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `name` = :name LIMIT 1");
				$query->bindParam(':name', $name);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByDefault($default){
			if( $this->connection ){
				if( $default == null && $this->getDefault() != ""){
					$default = $this->getDefault();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `default` = :default LIMIT 1");
				$query->bindParam(':default', $default);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByErrorText($errorText){
			if( $this->connection ){
				if( $errorText == null && $this->getErrorText() != ""){
					$errorText = $this->getErrorText();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `errorText` = :errorText LIMIT 1");
				$query->bindParam(':errorText', $errorText);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByPlaceholder($placeholder){
			if( $this->connection ){
				if( $placeholder == null && $this->getPlaceholder() != ""){
					$placeholder = $this->getPlaceholder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `placeholder` = :placeholder LIMIT 1");
				$query->bindParam(':placeholder', $placeholder);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByRegex($regex){
			if( $this->connection ){
				if( $regex == null && $this->getRegex() != ""){
					$regex = $this->getRegex();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `regex` = :regex LIMIT 1");
				$query->bindParam(':regex', $regex);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMinValue($minValue){
			if( $this->connection ){
				if( $minValue == null && $this->getMinValue() != ""){
					$minValue = $this->getMinValue();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minValue` = :minValue LIMIT 1");
				$query->bindParam(':minValue', $minValue);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMaxValue($maxValue){
			if( $this->connection ){
				if( $maxValue == null && $this->getMaxValue() != ""){
					$maxValue = $this->getMaxValue();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxValue` = :maxValue LIMIT 1");
				$query->bindParam(':maxValue', $maxValue);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMinLength($minLength){
			if( $this->connection ){
				if( $minLength == null && $this->getMinLength() != ""){
					$minLength = $this->getMinLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minLength` = :minLength LIMIT 1");
				$query->bindParam(':minLength', $minLength);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMaxLength($maxLength){
			if( $this->connection ){
				if( $maxLength == null && $this->getMaxLength() != ""){
					$maxLength = $this->getMaxLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxLength` = :maxLength LIMIT 1");
				$query->bindParam(':maxLength', $maxLength);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByClasses($classes){
			if( $this->connection ){
				if( $classes == null && $this->getClasses() != ""){
					$classes = $this->getClasses();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `classes` = :classes LIMIT 1");
				$query->bindParam(':classes', $classes);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByRequired($required){
			if( $this->connection ){
				if( $required == null && $this->getRequired() != ""){
					$required = $this->getRequired();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `required` = :required LIMIT 1");
				$query->bindParam(':required', $required);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByEncrypted($encrypted){
			if( $this->connection ){
				if( $encrypted == null && $this->getEncrypted() != ""){
					$encrypted = $this->getEncrypted();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `encrypted` = :encrypted LIMIT 1");
				$query->bindParam(':encrypted', $encrypted);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByFormID($formID){
			if( $this->connection ){
				if( $formID == null && $this->getFormID() != ""){
					$formID = $this->getFormID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `formID` = :formID LIMIT 1");
				$query->bindParam(':formID', $formID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByOrder($order){
			if( $this->connection ){
				if( $order == null && $this->getOrder() != ""){
					$order = $this->getOrder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `order` = :order LIMIT 1");
				$query->bindParam(':order', $order);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}


		function getListById($id=null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `id` = :id");
				$query->bindParam(':id', $id);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByType($type=null){
			if( $this->connection ){
				if( $type == null && $this->getType() != ""){
					$type = $this->getType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `type` = :type");
				$query->bindParam(':type', $type);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByLabel($label=null){
			if( $this->connection ){
				if( $label == null && $this->getLabel() != ""){
					$label = $this->getLabel();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `label` = :label");
				$query->bindParam(':label', $label);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByName($name=null){
			if( $this->connection ){
				if( $name == null && $this->getName() != ""){
					$name = $this->getName();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `name` = :name");
				$query->bindParam(':name', $name);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByDefault($default=null){
			if( $this->connection ){
				if( $default == null && $this->getDefault() != ""){
					$default = $this->getDefault();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `default` = :default");
				$query->bindParam(':default', $default);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByErrorText($errorText=null){
			if( $this->connection ){
				if( $errorText == null && $this->getErrorText() != ""){
					$errorText = $this->getErrorText();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `errorText` = :errorText");
				$query->bindParam(':errorText', $errorText);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByPlaceholder($placeholder=null){
			if( $this->connection ){
				if( $placeholder == null && $this->getPlaceholder() != ""){
					$placeholder = $this->getPlaceholder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `placeholder` = :placeholder");
				$query->bindParam(':placeholder', $placeholder);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByRegex($regex=null){
			if( $this->connection ){
				if( $regex == null && $this->getRegex() != ""){
					$regex = $this->getRegex();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `regex` = :regex");
				$query->bindParam(':regex', $regex);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMinValue($minValue=null){
			if( $this->connection ){
				if( $minValue == null && $this->getMinValue() != ""){
					$minValue = $this->getMinValue();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minValue` = :minValue");
				$query->bindParam(':minValue', $minValue);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMaxValue($maxValue=null){
			if( $this->connection ){
				if( $maxValue == null && $this->getMaxValue() != ""){
					$maxValue = $this->getMaxValue();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxValue` = :maxValue");
				$query->bindParam(':maxValue', $maxValue);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMinLength($minLength=null){
			if( $this->connection ){
				if( $minLength == null && $this->getMinLength() != ""){
					$minLength = $this->getMinLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minLength` = :minLength");
				$query->bindParam(':minLength', $minLength);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMaxLength($maxLength=null){
			if( $this->connection ){
				if( $maxLength == null && $this->getMaxLength() != ""){
					$maxLength = $this->getMaxLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxLength` = :maxLength");
				$query->bindParam(':maxLength', $maxLength);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByClasses($classes=null){
			if( $this->connection ){
				if( $classes == null && $this->getClasses() != ""){
					$classes = $this->getClasses();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `classes` = :classes");
				$query->bindParam(':classes', $classes);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByRequired($required=null){
			if( $this->connection ){
				if( $required == null && $this->getRequired() != ""){
					$required = $this->getRequired();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `required` = :required");
				$query->bindParam(':required', $required);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByEncrypted($encrypted=null){
			if( $this->connection ){
				if( $encrypted == null && $this->getEncrypted() != ""){
					$encrypted = $this->getEncrypted();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `encrypted` = :encrypted");
				$query->bindParam(':encrypted', $encrypted);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByFormID($formID=null){
			if( $this->connection ){
				if( $formID == null && $this->getFormID() != ""){
					$formID = $this->getFormID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `formID` = :formID");
				$query->bindParam(':formID', $formID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByOrder($order=null){
			if( $this->connection ){
				if( $order == null && $this->getOrder() != ""){
					$order = $this->getOrder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `order` = :order");
				$query->bindParam(':order', $order);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		/*Return parameter (object) as Array*/
		function toArray ($obj=null) {
			if (is_object($obj)) $obj = (array)$obj;
			if (is_array($obj)) {
				$new = array();
				foreach ($obj as $key => $val) {
					$class = get_class($this);
					$k = $key;
					$fkey = trim( str_replace( $class,"",$k));
					if( $fkey == "connection" || $fkey == "errors" || $fkey == "errorCount" ){
						//dont add
					}else{
						$new[$fkey] = $this->toArray($val);
					}
				}
			} else {
				$new = $obj;
			}
			return $new;
		}

		/*Return object as Array*/
		function asArray(){
			$array = $this->toArray( $this );
			return $array;
		}

		/*Return object as JSON String*/
		function asJSON(){
			return json_encode($this->asArray());
		}

		/*Return clone of Object*/
		function getClone(){
			return clone($this);
		}


		/*Echo array as CSV file*/
		function arrayToCSVFile($array, $filename="formobject.csv", $delimiter=",", $showHeader=true){
			ob_clean();
			if( !is_array($array) ){
				$array = $this->asArray();
			}
			if( !is_array($showHeader) && $showHeader == true){
				$header=array();
				foreach( $array[0] as $key => $value){
					$header[] = strtoupper($key);
				}
				array_unshift($array, $header);
			}
			if( is_array($showHeader) ){
				array_unshift($array, $showHeader);
			}
			header('Content-Type: application/csv; charset=UTF-8');
			header('Content-Disposition: attachement; filename="'.$filename.'";');
			$f = fopen('php://output', 'w');
			foreach ($array as $line) {
				fputcsv($f, $line, $delimiter);
			}
			exit;
		}


		/*getObjectsLikeThis - returns array*/
		function getObjectsLikeThis($asArray=true){
			if( $this->connection ){
				$buildQuery="SELECT * FROM `formobject` WHERE ";
				$numParams = 0;
				$values = array();
				foreach ($this as $key => $value) {
					if( $value != "" && $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
						$buildQuery.="`".$key."` = :value_".$numParams." AND ";
						$numParams++;
						$values[] = $value;
					}
				}
				if( $numParams > 0 ){
					//remove last AND
					$buildQuery = substr( $buildQuery , 0, (strlen($buildQuery) -4) );
					$query = $this->connection->PREPARE($buildQuery);
					for($i=0; $i < $numParams; $i++){
						$query->bindParam(":value_".$i, $values[$i]);
					}
					if( $query->execute() ){
						if( $asArray == true ){
							return $query->fetchAll(PDO::FETCH_ASSOC);
						}else{
							$objArray = array();
							while( $result = $query->fetchObject("formobject") ){
								$object = $result;
								$objArray[] = $object;
							}
							return $objArray;
						}
					}
				}
			}
		}

		/*get properties*/
		function getObjectsProperties(){
			$properties = array();
			foreach ($this as $key => $value) {
				if( $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
					$properties[] = $key;
				}
			}
			return $properties;
		}
		/*Human readable print out of object*/
		function printFormatted($return=false){
			if($return){
				return '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}else{
				echo '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}
		}

	}
?>