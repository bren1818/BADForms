<?php
/*  Class Generated by Brendon Irwin's Class Generator

	Class: Formobject

	formID, i
	type, i
	label, v
	name, v
	defaultVal, v
	errorText, v
	placeholder, v
	regex, v
	minVal, i
	maxVal, i
	minLength, i
	maxLength, i
	listType, i
	listID, i
	csList, v
	reuseableType, i
	reuseableID, i
	classes, v
	required, i
	encrypted, i
	rowOrder, i
	lastUpdated, dt
	publicFormObject, bool
	genericUseID, i
	genericUseText, v

*/

	class Formobject{
		private $id;
		private $connection;
		private $errors;
		private $errorCount;
		private $formID;
		private $type;
		private $label;
		private $name;
		private $defaultVal;
		private $errorText;
		private $placeholder;
		private $regex;
		private $minVal;
		private $maxVal;
		private $minLength;
		private $maxLength;
		private $listType;
		private $listID;
		private $csList;
		private $reuseableType;
		private $reuseableID;
		private $classes;
		private $required;
		private $encrypted;
		private $rowOrder;
		private $lastUpdated;
		private $publicFormObject;
		private $genericUseID;
		private $genericUseText;


		/*Constructor*/
		function __construct($databaseConnection=null){
			$this->connection = $databaseConnection;
		}

		/*Getters and Setters*/
		function getId(){
			return $this->id;
		}

		function setId($id){
			$this->id = $id;
		}

		function getConnection(){
			return $this->connection;
		}

		function setConnection($connection){
			$this->connection = $connection;
		}

		function getErrors(){
			return $this->errors;
		}

		function setErrors($errors){
			$this->errors = $errors;
		}

		function getErrorCount(){
			return $this->errorCount;
		}

		function setErrorCount($errorCount){
			$this->errorCount = $errorCount;
		}

		function getFormID(){
			return $this->formID;
		}

		function setFormID($formID){
			$this->formID = $formID;
		}

		function getType(){
			return $this->type;
		}

		function setType($type){
			$this->type = $type;
		}

		function getLabel(){
			return $this->label;
		}

		function setLabel($label){
			$this->label = $label;
		}

		function getName(){
			return $this->name;
		}

		function setName($name){
			$this->name = $name;
		}

		function getDefaultVal(){
			return $this->defaultVal;
		}

		function setDefaultVal($defaultVal){
			$this->defaultVal = $defaultVal;
		}

		function getErrorText(){
			return $this->errorText;
		}

		function setErrorText($errorText){
			$this->errorText = $errorText;
		}

		function getPlaceholder(){
			return $this->placeholder;
		}

		function setPlaceholder($placeholder){
			$this->placeholder = $placeholder;
		}

		function getRegex(){
			return $this->regex;
		}

		function setRegex($regex){
			$this->regex = $regex;
		}

		function getMinVal(){
			return $this->minVal;
		}

		function setMinVal($minVal){
			$this->minVal = $minVal;
		}

		function getMaxVal(){
			return $this->maxVal;
		}

		function setMaxVal($maxVal){
			$this->maxVal = $maxVal;
		}

		function getMinLength(){
			return $this->minLength;
		}

		function setMinLength($minLength){
			$this->minLength = $minLength;
		}

		function getMaxLength(){
			return $this->maxLength;
		}

		function setMaxLength($maxLength){
			$this->maxLength = $maxLength;
		}

		function getListType(){
			return $this->listType;
		}

		function setListType($listType){
			$this->listType = $listType;
		}

		function getListID(){
			return $this->listID;
		}

		function setListID($listID){
			$this->listID = $listID;
		}

		function getCsList(){
			return $this->csList;
		}

		function setCsList($csList){
			$this->csList = $csList;
		}

		function getReuseableType(){
			return $this->reuseableType;
		}

		function setReuseableType($reuseableType){
			$this->reuseableType = $reuseableType;
		}

		function getReuseableID(){
			return $this->reuseableID;
		}

		function setReuseableID($reuseableID){
			$this->reuseableID = $reuseableID;
		}

		function getClasses(){
			return $this->classes;
		}

		function setClasses($classes){
			$this->classes = $classes;
		}

		function getRequired(){
			return $this->required;
		}

		function setRequired($required){
			$this->required = $required;
		}

		function getEncrypted(){
			return $this->encrypted;
		}

		function setEncrypted($encrypted){
			$this->encrypted = $encrypted;
		}

		function getRowOrder(){
			return $this->rowOrder;
		}

		function setRowOrder($rowOrder){
			$this->rowOrder = $rowOrder;
		}

		function getLastUpdated(){
			return $this->lastUpdated;
		}

		function setLastUpdated($lastUpdated){
			$this->lastUpdated = $lastUpdated;
		}

		function getPublicFormObject(){
			return $this->publicFormObject;
		}

		function setPublicFormObject($publicFormObject){
			$this->publicFormObject = $publicFormObject;
		}

		function getGenericUseID(){
			return $this->genericUseID;
		}

		function setGenericUseID($genericUseID){
			$this->genericUseID = $genericUseID;
		}

		function getGenericUseText(){
			return $this->genericUseText;
		}

		function setGenericUseText($genericUseText){
			$this->genericUseText = $genericUseText;
		}

		/*Special Functions*/
		function load($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						$formobject = $query->fetchObject("formobject");
					}
					if( is_object( $formobject ) ){
						$formobject->setConnection( $this->connection );
					}
					return $formobject;
				}
			}
		}

		function getFromPost(){
			$this->setFormID( (isset($_POST["formID"])) ? $_POST["formID"] : $this->getFormID() );
			$this->setType( (isset($_POST["type"])) ? $_POST["type"] : $this->getType() );
			$this->setLabel( (isset($_POST["label"])) ? $_POST["label"] : $this->getLabel() );
			$this->setName( (isset($_POST["name"])) ? $_POST["name"] : $this->getName() );
			$this->setDefaultVal( (isset($_POST["defaultVal"])) ? $_POST["defaultVal"] : $this->getDefaultVal() );
			$this->setErrorText( (isset($_POST["errorText"])) ? $_POST["errorText"] : $this->getErrorText() );
			$this->setPlaceholder( (isset($_POST["placeholder"])) ? $_POST["placeholder"] : $this->getPlaceholder() );
			$this->setRegex( (isset($_POST["regex"])) ? $_POST["regex"] : $this->getRegex() );
			$this->setMinVal( (isset($_POST["minVal"])) ? $_POST["minVal"] : $this->getMinVal() );
			$this->setMaxVal( (isset($_POST["maxVal"])) ? $_POST["maxVal"] : $this->getMaxVal() );
			$this->setMinLength( (isset($_POST["minLength"])) ? $_POST["minLength"] : $this->getMinLength() );
			$this->setMaxLength( (isset($_POST["maxLength"])) ? $_POST["maxLength"] : $this->getMaxLength() );
			$this->setListType( (isset($_POST["listType"])) ? $_POST["listType"] : $this->getListType() );
			$this->setListID( (isset($_POST["listID"])) ? $_POST["listID"] : $this->getListID() );
			$this->setCsList( (isset($_POST["csList"])) ? $_POST["csList"] : $this->getCsList() );
			$this->setReuseableType( (isset($_POST["reuseableType"])) ? $_POST["reuseableType"] : $this->getReuseableType() );
			$this->setReuseableID( (isset($_POST["reuseableID"])) ? $_POST["reuseableID"] : $this->getReuseableID() );
			$this->setClasses( (isset($_POST["classes"])) ? $_POST["classes"] : $this->getClasses() );
			$this->setRequired( (isset($_POST["required"])) ? $_POST["required"] : $this->getRequired() );
			$this->setEncrypted( (isset($_POST["encrypted"])) ? $_POST["encrypted"] : $this->getEncrypted() );
			$this->setRowOrder( (isset($_POST["rowOrder"])) ? $_POST["rowOrder"] : $this->getRowOrder() );
			$this->setLastUpdated( (isset($_POST["lastUpdated"])) ? $_POST["lastUpdated"] : $this->getLastUpdated() );
			$this->setPublicFormObject( (isset($_POST["publicFormObject"])) ? $_POST["publicFormObject"] : $this->getPublicFormObject() );
			$this->setGenericUseID( (isset($_POST["genericUseID"])) ? $_POST["genericUseID"] : $this->getGenericUseID() );
			$this->setGenericUseText( (isset($_POST["genericUseText"])) ? $_POST["genericUseText"] : $this->getGenericUseText() );
		}

		function getFromRequest(){
			$this->setFormID( (isset($_REQUEST["formID"])) ? $_REQUEST["formID"] : $this->getFormID() );
			$this->setType( (isset($_REQUEST["type"])) ? $_REQUEST["type"] : $this->getType() );
			$this->setLabel( (isset($_REQUEST["label"])) ? $_REQUEST["label"] : $this->getLabel() );
			$this->setName( (isset($_REQUEST["name"])) ? $_REQUEST["name"] : $this->getName() );
			$this->setDefaultVal( (isset($_REQUEST["defaultVal"])) ? $_REQUEST["defaultVal"] : $this->getDefaultVal() );
			$this->setErrorText( (isset($_REQUEST["errorText"])) ? $_REQUEST["errorText"] : $this->getErrorText() );
			$this->setPlaceholder( (isset($_REQUEST["placeholder"])) ? $_REQUEST["placeholder"] : $this->getPlaceholder() );
			$this->setRegex( (isset($_REQUEST["regex"])) ? $_REQUEST["regex"] : $this->getRegex() );
			$this->setMinVal( (isset($_REQUEST["minVal"])) ? $_REQUEST["minVal"] : $this->getMinVal() );
			$this->setMaxVal( (isset($_REQUEST["maxVal"])) ? $_REQUEST["maxVal"] : $this->getMaxVal() );
			$this->setMinLength( (isset($_REQUEST["minLength"])) ? $_REQUEST["minLength"] : $this->getMinLength() );
			$this->setMaxLength( (isset($_REQUEST["maxLength"])) ? $_REQUEST["maxLength"] : $this->getMaxLength() );
			$this->setListType( (isset($_REQUEST["listType"])) ? $_REQUEST["listType"] : $this->getListType() );
			$this->setListID( (isset($_REQUEST["listID"])) ? $_REQUEST["listID"] : $this->getListID() );
			$this->setCsList( (isset($_REQUEST["csList"])) ? $_REQUEST["csList"] : $this->getCsList() );
			$this->setReuseableType( (isset($_REQUEST["reuseableType"])) ? $_REQUEST["reuseableType"] : $this->getReuseableType() );
			$this->setReuseableID( (isset($_REQUEST["reuseableID"])) ? $_REQUEST["reuseableID"] : $this->getReuseableID() );
			$this->setClasses( (isset($_REQUEST["classes"])) ? $_REQUEST["classes"] : $this->getClasses() );
			$this->setRequired( (isset($_REQUEST["required"])) ? $_REQUEST["required"] : $this->getRequired() );
			$this->setEncrypted( (isset($_REQUEST["encrypted"])) ? $_REQUEST["encrypted"] : $this->getEncrypted() );
			$this->setRowOrder( (isset($_REQUEST["rowOrder"])) ? $_REQUEST["rowOrder"] : $this->getRowOrder() );
			$this->setLastUpdated( (isset($_REQUEST["lastUpdated"])) ? $_REQUEST["lastUpdated"] : $this->getLastUpdated() );
			$this->setPublicFormObject( (isset($_REQUEST["publicFormObject"])) ? $_REQUEST["publicFormObject"] : $this->getPublicFormObject() );
			$this->setGenericUseID( (isset($_REQUEST["genericUseID"])) ? $_REQUEST["genericUseID"] : $this->getGenericUseID() );
			$this->setGenericUseText( (isset($_REQUEST["genericUseText"])) ? $_REQUEST["genericUseText"] : $this->getGenericUseText() );
		}

		function getFromArray($arr){
			$this->setFormID( (isset($arr["formID"])) ? $arr["formID"] : $this->getFormID() );
			$this->setType( (isset($arr["type"])) ? $arr["type"] : $this->getType() );
			$this->setLabel( (isset($arr["label"])) ? $arr["label"] : $this->getLabel() );
			$this->setName( (isset($arr["name"])) ? $arr["name"] : $this->getName() );
			$this->setDefaultVal( (isset($arr["defaultVal"])) ? $arr["defaultVal"] : $this->getDefaultVal() );
			$this->setErrorText( (isset($arr["errorText"])) ? $arr["errorText"] : $this->getErrorText() );
			$this->setPlaceholder( (isset($arr["placeholder"])) ? $arr["placeholder"] : $this->getPlaceholder() );
			$this->setRegex( (isset($arr["regex"])) ? $arr["regex"] : $this->getRegex() );
			$this->setMinVal( (isset($arr["minVal"])) ? $arr["minVal"] : $this->getMinVal() );
			$this->setMaxVal( (isset($arr["maxVal"])) ? $arr["maxVal"] : $this->getMaxVal() );
			$this->setMinLength( (isset($arr["minLength"])) ? $arr["minLength"] : $this->getMinLength() );
			$this->setMaxLength( (isset($arr["maxLength"])) ? $arr["maxLength"] : $this->getMaxLength() );
			$this->setListType( (isset($arr["listType"])) ? $arr["listType"] : $this->getListType() );
			$this->setListID( (isset($arr["listID"])) ? $arr["listID"] : $this->getListID() );
			$this->setCsList( (isset($arr["csList"])) ? $arr["csList"] : $this->getCsList() );
			$this->setReuseableType( (isset($arr["reuseableType"])) ? $arr["reuseableType"] : $this->getReuseableType() );
			$this->setReuseableID( (isset($arr["reuseableID"])) ? $arr["reuseableID"] : $this->getReuseableID() );
			$this->setClasses( (isset($arr["classes"])) ? $arr["classes"] : $this->getClasses() );
			$this->setRequired( (isset($arr["required"])) ? $arr["required"] : $this->getRequired() );
			$this->setEncrypted( (isset($arr["encrypted"])) ? $arr["encrypted"] : $this->getEncrypted() );
			$this->setRowOrder( (isset($arr["rowOrder"])) ? $arr["rowOrder"] : $this->getRowOrder() );
			$this->setLastUpdated( (isset($arr["lastUpdated"])) ? $arr["lastUpdated"] : $this->getLastUpdated() );
			$this->setPublicFormObject( (isset($arr["publicFormObject"])) ? $arr["publicFormObject"] : $this->getPublicFormObject() );
			$this->setGenericUseID( (isset($arr["genericUseID"])) ? $arr["genericUseID"] : $this->getGenericUseID() );
			$this->setGenericUseText( (isset($arr["genericUseText"])) ? $arr["genericUseText"] : $this->getGenericUseText() );
		}

		function compareTo($formobject){
			$log = array();
			if($this->getId() != $formobject->getId() ){
				$log["Id"] = "modified";
			}else{
				$log["Id"] = "un-modified";
			}
			if($this->getConnection() != $formobject->getConnection() ){
				$log["Connection"] = "modified";
			}else{
				$log["Connection"] = "un-modified";
			}
			if($this->getErrors() != $formobject->getErrors() ){
				$log["Errors"] = "modified";
			}else{
				$log["Errors"] = "un-modified";
			}
			if($this->getErrorCount() != $formobject->getErrorCount() ){
				$log["ErrorCount"] = "modified";
			}else{
				$log["ErrorCount"] = "un-modified";
			}
			if($this->getFormID() != $formobject->getFormID() ){
				$log["FormID"] = "modified";
			}else{
				$log["FormID"] = "un-modified";
			}
			if($this->getType() != $formobject->getType() ){
				$log["Type"] = "modified";
			}else{
				$log["Type"] = "un-modified";
			}
			if($this->getLabel() != $formobject->getLabel() ){
				$log["Label"] = "modified";
			}else{
				$log["Label"] = "un-modified";
			}
			if($this->getName() != $formobject->getName() ){
				$log["Name"] = "modified";
			}else{
				$log["Name"] = "un-modified";
			}
			if($this->getDefaultVal() != $formobject->getDefaultVal() ){
				$log["DefaultVal"] = "modified";
			}else{
				$log["DefaultVal"] = "un-modified";
			}
			if($this->getErrorText() != $formobject->getErrorText() ){
				$log["ErrorText"] = "modified";
			}else{
				$log["ErrorText"] = "un-modified";
			}
			if($this->getPlaceholder() != $formobject->getPlaceholder() ){
				$log["Placeholder"] = "modified";
			}else{
				$log["Placeholder"] = "un-modified";
			}
			if($this->getRegex() != $formobject->getRegex() ){
				$log["Regex"] = "modified";
			}else{
				$log["Regex"] = "un-modified";
			}
			if($this->getMinVal() != $formobject->getMinVal() ){
				$log["MinVal"] = "modified";
			}else{
				$log["MinVal"] = "un-modified";
			}
			if($this->getMaxVal() != $formobject->getMaxVal() ){
				$log["MaxVal"] = "modified";
			}else{
				$log["MaxVal"] = "un-modified";
			}
			if($this->getMinLength() != $formobject->getMinLength() ){
				$log["MinLength"] = "modified";
			}else{
				$log["MinLength"] = "un-modified";
			}
			if($this->getMaxLength() != $formobject->getMaxLength() ){
				$log["MaxLength"] = "modified";
			}else{
				$log["MaxLength"] = "un-modified";
			}
			if($this->getListType() != $formobject->getListType() ){
				$log["ListType"] = "modified";
			}else{
				$log["ListType"] = "un-modified";
			}
			if($this->getListID() != $formobject->getListID() ){
				$log["ListID"] = "modified";
			}else{
				$log["ListID"] = "un-modified";
			}
			if($this->getCsList() != $formobject->getCsList() ){
				$log["CsList"] = "modified";
			}else{
				$log["CsList"] = "un-modified";
			}
			if($this->getReuseableType() != $formobject->getReuseableType() ){
				$log["ReuseableType"] = "modified";
			}else{
				$log["ReuseableType"] = "un-modified";
			}
			if($this->getReuseableID() != $formobject->getReuseableID() ){
				$log["ReuseableID"] = "modified";
			}else{
				$log["ReuseableID"] = "un-modified";
			}
			if($this->getClasses() != $formobject->getClasses() ){
				$log["Classes"] = "modified";
			}else{
				$log["Classes"] = "un-modified";
			}
			if($this->getRequired() != $formobject->getRequired() ){
				$log["Required"] = "modified";
			}else{
				$log["Required"] = "un-modified";
			}
			if($this->getEncrypted() != $formobject->getEncrypted() ){
				$log["Encrypted"] = "modified";
			}else{
				$log["Encrypted"] = "un-modified";
			}
			if($this->getRowOrder() != $formobject->getRowOrder() ){
				$log["RowOrder"] = "modified";
			}else{
				$log["RowOrder"] = "un-modified";
			}
			if($this->getLastUpdated() != $formobject->getLastUpdated() ){
				$log["LastUpdated"] = "modified";
			}else{
				$log["LastUpdated"] = "un-modified";
			}
			if($this->getPublicFormObject() != $formobject->getPublicFormObject() ){
				$log["PublicFormObject"] = "modified";
			}else{
				$log["PublicFormObject"] = "un-modified";
			}
			if($this->getGenericUseID() != $formobject->getGenericUseID() ){
				$log["GenericUseID"] = "modified";
			}else{
				$log["GenericUseID"] = "un-modified";
			}
			if($this->getGenericUseText() != $formobject->getGenericUseText() ){
				$log["GenericUseText"] = "modified";
			}else{
				$log["GenericUseText"] = "un-modified";
			}
		return $log;
		}

		function save(){
			$id = $this->getId();
			$formID = $this->getFormID();
			$type = $this->getType();
			$label = $this->getLabel();
			$name = $this->getName();
			$defaultVal = $this->getDefaultVal();
			$errorText = $this->getErrorText();
			$placeholder = $this->getPlaceholder();
			$regex = $this->getRegex();
			$minVal = $this->getMinVal();
			$maxVal = $this->getMaxVal();
			$minLength = $this->getMinLength();
			$maxLength = $this->getMaxLength();
			$listType = $this->getListType();
			$listID = $this->getListID();
			$csList = $this->getCsList();
			$reuseableType = $this->getReuseableType();
			$reuseableID = $this->getReuseableID();
			$classes = $this->getClasses();
			$required = $this->getRequired();
			$encrypted = $this->getEncrypted();
			$rowOrder = $this->getRowOrder();
			$lastUpdated = $this->getLastUpdated();
			$publicFormObject = $this->getPublicFormObject();
			$genericUseID = $this->getGenericUseID();
			$genericUseText = $this->getGenericUseText();
			if( $this->connection ){
				if( $id != "" ){
					/*Perform Update Operation*/
					$query = $this->connection->prepare("UPDATE  `formobject` SET `formID` = :formID ,`type` = :type ,`label` = :label ,`name` = :name ,`defaultVal` = :defaultVal ,`errorText` = :errorText ,`placeholder` = :placeholder ,`regex` = :regex ,`minVal` = :minVal ,`maxVal` = :maxVal ,`minLength` = :minLength ,`maxLength` = :maxLength ,`listType` = :listType ,`listID` = :listID ,`csList` = :csList ,`reuseableType` = :reuseableType ,`reuseableID` = :reuseableID ,`classes` = :classes ,`required` = :required ,`encrypted` = :encrypted ,`rowOrder` = :rowOrder ,`lastUpdated` = :lastUpdated ,`publicFormObject` = :publicFormObject ,`genericUseID` = :genericUseID ,`genericUseText` = :genericUseText WHERE `id` = :id");
					$query->bindParam('formID', $formID);
					$query->bindParam('type', $type);
					$query->bindParam('label', $label);
					$query->bindParam('name', $name);
					$query->bindParam('defaultVal', $defaultVal);
					$query->bindParam('errorText', $errorText);
					$query->bindParam('placeholder', $placeholder);
					$query->bindParam('regex', $regex);
					$query->bindParam('minVal', $minVal);
					$query->bindParam('maxVal', $maxVal);
					$query->bindParam('minLength', $minLength);
					$query->bindParam('maxLength', $maxLength);
					$query->bindParam('listType', $listType);
					$query->bindParam('listID', $listID);
					$query->bindParam('csList', $csList);
					$query->bindParam('reuseableType', $reuseableType);
					$query->bindParam('reuseableID', $reuseableID);
					$query->bindParam('classes', $classes);
					$query->bindParam('required', $required);
					$query->bindParam('encrypted', $encrypted);
					$query->bindParam('rowOrder', $rowOrder);
					$query->bindParam('lastUpdated', $lastUpdated);
					$query->bindParam('publicFormObject', $publicFormObject);
					$query->bindParam('genericUseID', $genericUseID);
					$query->bindParam('genericUseText', $genericUseText);
					$query->bindParam('id', $id);
					if( $query->execute() ){
						return $id;
					}else{
						return -1;
					}

				}else{
					/*Perform Insert Operation*/
					$query = $this->connection->prepare("INSERT INTO `formobject` (`id`,`formID`,`type`,`label`,`name`,`defaultVal`,`errorText`,`placeholder`,`regex`,`minVal`,`maxVal`,`minLength`,`maxLength`,`listType`,`listID`,`csList`,`reuseableType`,`reuseableID`,`classes`,`required`,`encrypted`,`rowOrder`,`lastUpdated`,`publicFormObject`,`genericUseID`,`genericUseText`) VALUES (NULL,:formID,:type,:label,:name,:defaultVal,:errorText,:placeholder,:regex,:minVal,:maxVal,:minLength,:maxLength,:listType,:listID,:csList,:reuseableType,:reuseableID,:classes,:required,:encrypted,:rowOrder,:lastUpdated,:publicFormObject,:genericUseID,:genericUseText);");
					$query->bindParam(':formID', $formID);
					$query->bindParam(':type', $type);
					$query->bindParam(':label', $label);
					$query->bindParam(':name', $name);
					$query->bindParam(':defaultVal', $defaultVal);
					$query->bindParam(':errorText', $errorText);
					$query->bindParam(':placeholder', $placeholder);
					$query->bindParam(':regex', $regex);
					$query->bindParam(':minVal', $minVal);
					$query->bindParam(':maxVal', $maxVal);
					$query->bindParam(':minLength', $minLength);
					$query->bindParam(':maxLength', $maxLength);
					$query->bindParam(':listType', $listType);
					$query->bindParam(':listID', $listID);
					$query->bindParam(':csList', $csList);
					$query->bindParam(':reuseableType', $reuseableType);
					$query->bindParam(':reuseableID', $reuseableID);
					$query->bindParam(':classes', $classes);
					$query->bindParam(':required', $required);
					$query->bindParam(':encrypted', $encrypted);
					$query->bindParam(':rowOrder', $rowOrder);
					$query->bindParam(':lastUpdated', $lastUpdated);
					$query->bindParam(':publicFormObject', $publicFormObject);
					$query->bindParam(':genericUseID', $genericUseID);
					$query->bindParam(':genericUseText', $genericUseText);

					if( $query->execute() ){
						$this->setId( $this->connection->lastInsertId() );
						return $this->getId();
					}else{
						return -1;
					}	
				}
			}
		}


		function delete($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("DELETE FROM `formobject` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						return 1;
					}else{
						return 0;
					}
				}
			}
		}

		function getById($id){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `id` = :id LIMIT 1");
				$query->bindParam(':id', $id);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByFormID($formID){
			if( $this->connection ){
				if( $formID == null && $this->getFormID() != ""){
					$formID = $this->getFormID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `formID` = :formID LIMIT 1");
				$query->bindParam(':formID', $formID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByType($type){
			if( $this->connection ){
				if( $type == null && $this->getType() != ""){
					$type = $this->getType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `type` = :type LIMIT 1");
				$query->bindParam(':type', $type);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByLabel($label){
			if( $this->connection ){
				if( $label == null && $this->getLabel() != ""){
					$label = $this->getLabel();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `label` = :label LIMIT 1");
				$query->bindParam(':label', $label);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByName($name){
			if( $this->connection ){
				if( $name == null && $this->getName() != ""){
					$name = $this->getName();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `name` = :name LIMIT 1");
				$query->bindParam(':name', $name);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByDefaultVal($defaultVal){
			if( $this->connection ){
				if( $defaultVal == null && $this->getDefaultVal() != ""){
					$defaultVal = $this->getDefaultVal();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `defaultVal` = :defaultVal LIMIT 1");
				$query->bindParam(':defaultVal', $defaultVal);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByErrorText($errorText){
			if( $this->connection ){
				if( $errorText == null && $this->getErrorText() != ""){
					$errorText = $this->getErrorText();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `errorText` = :errorText LIMIT 1");
				$query->bindParam(':errorText', $errorText);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByPlaceholder($placeholder){
			if( $this->connection ){
				if( $placeholder == null && $this->getPlaceholder() != ""){
					$placeholder = $this->getPlaceholder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `placeholder` = :placeholder LIMIT 1");
				$query->bindParam(':placeholder', $placeholder);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByRegex($regex){
			if( $this->connection ){
				if( $regex == null && $this->getRegex() != ""){
					$regex = $this->getRegex();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `regex` = :regex LIMIT 1");
				$query->bindParam(':regex', $regex);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMinVal($minVal){
			if( $this->connection ){
				if( $minVal == null && $this->getMinVal() != ""){
					$minVal = $this->getMinVal();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minVal` = :minVal LIMIT 1");
				$query->bindParam(':minVal', $minVal);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMaxVal($maxVal){
			if( $this->connection ){
				if( $maxVal == null && $this->getMaxVal() != ""){
					$maxVal = $this->getMaxVal();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxVal` = :maxVal LIMIT 1");
				$query->bindParam(':maxVal', $maxVal);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMinLength($minLength){
			if( $this->connection ){
				if( $minLength == null && $this->getMinLength() != ""){
					$minLength = $this->getMinLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minLength` = :minLength LIMIT 1");
				$query->bindParam(':minLength', $minLength);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByMaxLength($maxLength){
			if( $this->connection ){
				if( $maxLength == null && $this->getMaxLength() != ""){
					$maxLength = $this->getMaxLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxLength` = :maxLength LIMIT 1");
				$query->bindParam(':maxLength', $maxLength);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByListType($listType){
			if( $this->connection ){
				if( $listType == null && $this->getListType() != ""){
					$listType = $this->getListType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `listType` = :listType LIMIT 1");
				$query->bindParam(':listType', $listType);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByListID($listID){
			if( $this->connection ){
				if( $listID == null && $this->getListID() != ""){
					$listID = $this->getListID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `listID` = :listID LIMIT 1");
				$query->bindParam(':listID', $listID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByCsList($csList){
			if( $this->connection ){
				if( $csList == null && $this->getCsList() != ""){
					$csList = $this->getCsList();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `csList` = :csList LIMIT 1");
				$query->bindParam(':csList', $csList);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByReuseableType($reuseableType){
			if( $this->connection ){
				if( $reuseableType == null && $this->getReuseableType() != ""){
					$reuseableType = $this->getReuseableType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `reuseableType` = :reuseableType LIMIT 1");
				$query->bindParam(':reuseableType', $reuseableType);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByReuseableID($reuseableID){
			if( $this->connection ){
				if( $reuseableID == null && $this->getReuseableID() != ""){
					$reuseableID = $this->getReuseableID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `reuseableID` = :reuseableID LIMIT 1");
				$query->bindParam(':reuseableID', $reuseableID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByClasses($classes){
			if( $this->connection ){
				if( $classes == null && $this->getClasses() != ""){
					$classes = $this->getClasses();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `classes` = :classes LIMIT 1");
				$query->bindParam(':classes', $classes);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByRequired($required){
			if( $this->connection ){
				if( $required == null && $this->getRequired() != ""){
					$required = $this->getRequired();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `required` = :required LIMIT 1");
				$query->bindParam(':required', $required);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByEncrypted($encrypted){
			if( $this->connection ){
				if( $encrypted == null && $this->getEncrypted() != ""){
					$encrypted = $this->getEncrypted();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `encrypted` = :encrypted LIMIT 1");
				$query->bindParam(':encrypted', $encrypted);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByRowOrder($rowOrder){
			if( $this->connection ){
				if( $rowOrder == null && $this->getRowOrder() != ""){
					$rowOrder = $this->getRowOrder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `rowOrder` = :rowOrder LIMIT 1");
				$query->bindParam(':rowOrder', $rowOrder);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByLastUpdated($lastUpdated){
			if( $this->connection ){
				if( $lastUpdated == null && $this->getLastUpdated() != ""){
					$lastUpdated = $this->getLastUpdated();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `lastUpdated` = :lastUpdated LIMIT 1");
				$query->bindParam(':lastUpdated', $lastUpdated);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByPublicFormObject($publicFormObject){
			if( $this->connection ){
				if( $publicFormObject == null && $this->getPublicFormObject() != ""){
					$publicFormObject = $this->getPublicFormObject();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `publicFormObject` = :publicFormObject LIMIT 1");
				$query->bindParam(':publicFormObject', $publicFormObject);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByGenericUseID($genericUseID){
			if( $this->connection ){
				if( $genericUseID == null && $this->getGenericUseID() != ""){
					$genericUseID = $this->getGenericUseID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `genericUseID` = :genericUseID LIMIT 1");
				$query->bindParam(':genericUseID', $genericUseID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByGenericUseText($genericUseText){
			if( $this->connection ){
				if( $genericUseText == null && $this->getGenericUseText() != ""){
					$genericUseText = $this->getGenericUseText();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `genericUseText` = :genericUseText LIMIT 1");
				$query->bindParam(':genericUseText', $genericUseText);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}


		function getListById($id=null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `id` = :id");
				$query->bindParam(':id', $id);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByFormID($formID=null){
			if( $this->connection ){
				if( $formID == null && $this->getFormID() != ""){
					$formID = $this->getFormID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `formID` = :formID");
				$query->bindParam(':formID', $formID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByType($type=null){
			if( $this->connection ){
				if( $type == null && $this->getType() != ""){
					$type = $this->getType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `type` = :type");
				$query->bindParam(':type', $type);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByLabel($label=null){
			if( $this->connection ){
				if( $label == null && $this->getLabel() != ""){
					$label = $this->getLabel();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `label` = :label");
				$query->bindParam(':label', $label);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByName($name=null){
			if( $this->connection ){
				if( $name == null && $this->getName() != ""){
					$name = $this->getName();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `name` = :name");
				$query->bindParam(':name', $name);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByDefaultVal($defaultVal=null){
			if( $this->connection ){
				if( $defaultVal == null && $this->getDefaultVal() != ""){
					$defaultVal = $this->getDefaultVal();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `defaultVal` = :defaultVal");
				$query->bindParam(':defaultVal', $defaultVal);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByErrorText($errorText=null){
			if( $this->connection ){
				if( $errorText == null && $this->getErrorText() != ""){
					$errorText = $this->getErrorText();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `errorText` = :errorText");
				$query->bindParam(':errorText', $errorText);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByPlaceholder($placeholder=null){
			if( $this->connection ){
				if( $placeholder == null && $this->getPlaceholder() != ""){
					$placeholder = $this->getPlaceholder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `placeholder` = :placeholder");
				$query->bindParam(':placeholder', $placeholder);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByRegex($regex=null){
			if( $this->connection ){
				if( $regex == null && $this->getRegex() != ""){
					$regex = $this->getRegex();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `regex` = :regex");
				$query->bindParam(':regex', $regex);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMinVal($minVal=null){
			if( $this->connection ){
				if( $minVal == null && $this->getMinVal() != ""){
					$minVal = $this->getMinVal();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minVal` = :minVal");
				$query->bindParam(':minVal', $minVal);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMaxVal($maxVal=null){
			if( $this->connection ){
				if( $maxVal == null && $this->getMaxVal() != ""){
					$maxVal = $this->getMaxVal();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxVal` = :maxVal");
				$query->bindParam(':maxVal', $maxVal);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMinLength($minLength=null){
			if( $this->connection ){
				if( $minLength == null && $this->getMinLength() != ""){
					$minLength = $this->getMinLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `minLength` = :minLength");
				$query->bindParam(':minLength', $minLength);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByMaxLength($maxLength=null){
			if( $this->connection ){
				if( $maxLength == null && $this->getMaxLength() != ""){
					$maxLength = $this->getMaxLength();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `maxLength` = :maxLength");
				$query->bindParam(':maxLength', $maxLength);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByListType($listType=null){
			if( $this->connection ){
				if( $listType == null && $this->getListType() != ""){
					$listType = $this->getListType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `listType` = :listType");
				$query->bindParam(':listType', $listType);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByListID($listID=null){
			if( $this->connection ){
				if( $listID == null && $this->getListID() != ""){
					$listID = $this->getListID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `listID` = :listID");
				$query->bindParam(':listID', $listID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByCsList($csList=null){
			if( $this->connection ){
				if( $csList == null && $this->getCsList() != ""){
					$csList = $this->getCsList();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `csList` = :csList");
				$query->bindParam(':csList', $csList);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByReuseableType($reuseableType=null){
			if( $this->connection ){
				if( $reuseableType == null && $this->getReuseableType() != ""){
					$reuseableType = $this->getReuseableType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `reuseableType` = :reuseableType");
				$query->bindParam(':reuseableType', $reuseableType);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByReuseableID($reuseableID=null){
			if( $this->connection ){
				if( $reuseableID == null && $this->getReuseableID() != ""){
					$reuseableID = $this->getReuseableID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `reuseableID` = :reuseableID");
				$query->bindParam(':reuseableID', $reuseableID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByClasses($classes=null){
			if( $this->connection ){
				if( $classes == null && $this->getClasses() != ""){
					$classes = $this->getClasses();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `classes` = :classes");
				$query->bindParam(':classes', $classes);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByRequired($required=null){
			if( $this->connection ){
				if( $required == null && $this->getRequired() != ""){
					$required = $this->getRequired();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `required` = :required");
				$query->bindParam(':required', $required);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByEncrypted($encrypted=null){
			if( $this->connection ){
				if( $encrypted == null && $this->getEncrypted() != ""){
					$encrypted = $this->getEncrypted();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `encrypted` = :encrypted");
				$query->bindParam(':encrypted', $encrypted);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByRowOrder($rowOrder=null){
			if( $this->connection ){
				if( $rowOrder == null && $this->getRowOrder() != ""){
					$rowOrder = $this->getRowOrder();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `rowOrder` = :rowOrder");
				$query->bindParam(':rowOrder', $rowOrder);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByLastUpdated($lastUpdated=null){
			if( $this->connection ){
				if( $lastUpdated == null && $this->getLastUpdated() != ""){
					$lastUpdated = $this->getLastUpdated();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `lastUpdated` = :lastUpdated");
				$query->bindParam(':lastUpdated', $lastUpdated);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByPublicFormObject($publicFormObject=null){
			if( $this->connection ){
				if( $publicFormObject == null && $this->getPublicFormObject() != ""){
					$publicFormObject = $this->getPublicFormObject();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `publicFormObject` = :publicFormObject");
				$query->bindParam(':publicFormObject', $publicFormObject);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByGenericUseID($genericUseID=null){
			if( $this->connection ){
				if( $genericUseID == null && $this->getGenericUseID() != ""){
					$genericUseID = $this->getGenericUseID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `genericUseID` = :genericUseID");
				$query->bindParam(':genericUseID', $genericUseID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		function getListByGenericUseText($genericUseText=null){
			if( $this->connection ){
				if( $genericUseText == null && $this->getGenericUseText() != ""){
					$genericUseText = $this->getGenericUseText();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobject` WHERE `genericUseText` = :genericUseText");
				$query->bindParam(':genericUseText', $genericUseText);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobject") ){
						$formobjects[] = $result;
					}
					if( is_array( $formobjects ) ){
						return $formobjects;
					}else{
						return array();
					}

				}
			}
		}

		/*Return parameter (object) as Array*/
		function toArray ($obj=null) {
			if (is_object($obj)) $obj = (array)$obj;
			if (is_array($obj)) {
				$new = array();
				foreach ($obj as $key => $val) {
					$class = get_class($this);
					$k = $key;
					$fkey = trim( str_replace( $class,"",$k));
					if( $fkey == "connection" || $fkey == "errors" || $fkey == "errorCount" ){
						//dont add
					}else{
						$new[$fkey] = $this->toArray($val);
					}
				}
			} else {
				$new = $obj;
			}
			return $new;
		}

		/*Return object as Array*/
		function asArray(){
			$array = $this->toArray( $this );
			return $array;
		}

		/*Return object as JSON String*/
		function asJSON(){
			return json_encode($this->asArray());
		}

		/*Return clone of Object*/
		function getClone(){
			return clone($this);
		}


		/*Echo array as CSV file*/
		function arrayToCSVFile($array, $filename="formobject.csv", $delimiter=",", $showHeader=true){
			ob_clean();
			if( !is_array($array) ){
				$array = $this->asArray();
			}
			if( !is_array($showHeader) && $showHeader == true){
				$header=array();
				foreach( $array[0] as $key => $value){
					$header[] = strtoupper($key);
				}
				array_unshift($array, $header);
			}
			if( is_array($showHeader) ){
				array_unshift($array, $showHeader);
			}
			header('Content-Type: application/csv; charset=UTF-8');
			header('Content-Disposition: attachement; filename="'.$filename.'";');
			$f = fopen('php://output', 'w');
			foreach ($array as $line) {
				fputcsv($f, $line, $delimiter);
			}
			exit;
		}


		/*getObjectsLikeThis - returns array*/
		function getObjectsLikeThis($asArray=true){
			if( $this->connection ){
				$buildQuery="SELECT * FROM `formobject` WHERE ";
				$numParams = 0;
				$values = array();
				foreach ($this as $key => $value) {
					if( $value != "" && $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
						$buildQuery.="`".$key."` = :value_".$numParams." AND ";
						$numParams++;
						$values[] = $value;
					}
				}
				if( $numParams > 0 ){
					//remove last AND
					$buildQuery = substr( $buildQuery , 0, (strlen($buildQuery) -4) );
					$query = $this->connection->PREPARE($buildQuery);
					for($i=0; $i < $numParams; $i++){
						$query->bindParam(":value_".$i, $values[$i]);
					}
					if( $query->execute() ){
						if( $asArray == true ){
							return $query->fetchAll(PDO::FETCH_ASSOC);
						}else{
							$objArray = array();
							while( $result = $query->fetchObject("formobject") ){
								$object = $result;
								$objArray[] = $object;
							}
							return $objArray;
						}
					}
				}
			}
		}

		/*get properties*/
		function getObjectsProperties(){
			$properties = array();
			foreach ($this as $key => $value) {
				if( $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
					$properties[] = $key;
				}
			}
			return $properties;
		}
		/*Human readable print out of object*/
		function printFormatted($return=false){
			if($return){
				return '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}else{
				echo '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}
		}

	}
?>