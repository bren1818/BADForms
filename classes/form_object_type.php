<?php
/*  Class Generated by Brendon Irwin's Class Generator

	isListType, i
	html, v
	listItems, v
	value, v
	formID, i
	objectID, i

*/

	class Formobjecttype{
		private $id;
		private $connection;
		private $errors;
		private $errorCount;
		private $isListType;
		private $html;
		private $listItems;
		private $value;
		private $formID;
		private $objectID;


		/*Constructor*/
		function __construct($databaseConnection=null){
			$this->connection = $databaseConnection;
		}

		/*Getters and Setters*/
		function getId(){
			return $this->id;
		}

		function setId($id){
			$this->id = $id;
		}

		function getConnection(){
			return $this->connection;
		}

		function setConnection($connection){
			$this->connection = $connection;
		}

		function getErrors(){
			return $this->errors;
		}

		function setErrors($errors){
			$this->errors = $errors;
		}

		function getErrorCount(){
			return $this->errorCount;
		}

		function setErrorCount($errorCount){
			$this->errorCount = $errorCount;
		}

		function getIsListType(){
			return $this->isListType;
		}

		function setIsListType($isListType){
			$this->isListType = $isListType;
		}

		function getHtml(){
			return $this->html;
		}

		function setHtml($html){
			$this->html = $html;
		}

		function getListItems(){
			return $this->listItems;
		}

		function setListItems($listItems){
			$this->listItems = $listItems;
		}

		function getValue(){
			return $this->value;
		}

		function setValue($value){
			$this->value = $value;
		}

		function getFormID(){
			return $this->formID;
		}

		function setFormID($formID){
			$this->formID = $formID;
		}

		function getObjectID(){
			return $this->objectID;
		}

		function setObjectID($objectID){
			$this->objectID = $objectID;
		}

		/*Special Functions*/
		function load($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						$formobjecttype = $query->fetchObject("formobjecttype");
					}
					if( is_object( $formobjecttype ) ){
						$formobjecttype->setConnection( $this->connection );
					}
					return $formobjecttype;
				}
			}
		}

		function getFromPost(){
			$this->setIsListType( (isset($_POST["isListType"])) ? $_POST["isListType"] : $this->getIsListType() );
			$this->setHtml( (isset($_POST["html"])) ? $_POST["html"] : $this->getHtml() );
			$this->setListItems( (isset($_POST["listItems"])) ? $_POST["listItems"] : $this->getListItems() );
			$this->setValue( (isset($_POST["value"])) ? $_POST["value"] : $this->getValue() );
			$this->setFormID( (isset($_POST["formID"])) ? $_POST["formID"] : $this->getFormID() );
			$this->setObjectID( (isset($_POST["objectID"])) ? $_POST["objectID"] : $this->getObjectID() );
		}

		function getFromRequest(){
			$this->setIsListType( (isset($_REQUEST["isListType"])) ? $_REQUEST["isListType"] : $this->getIsListType() );
			$this->setHtml( (isset($_REQUEST["html"])) ? $_REQUEST["html"] : $this->getHtml() );
			$this->setListItems( (isset($_REQUEST["listItems"])) ? $_REQUEST["listItems"] : $this->getListItems() );
			$this->setValue( (isset($_REQUEST["value"])) ? $_REQUEST["value"] : $this->getValue() );
			$this->setFormID( (isset($_REQUEST["formID"])) ? $_REQUEST["formID"] : $this->getFormID() );
			$this->setObjectID( (isset($_REQUEST["objectID"])) ? $_REQUEST["objectID"] : $this->getObjectID() );
		}

		function save(){
			$id = $this->getId();
			$isListType = $this->getIsListType();
			$html = $this->getHtml();
			$listItems = $this->getListItems();
			$value = $this->getValue();
			$formID = $this->getFormID();
			$objectID = $this->getObjectID();
			if( $this->connection ){
				if( $id != "" ){
					/*Perform Update Operation*/
					$query = $this->connection->prepare("UPDATE  `formobjecttype` SET `isListType` = :isListType ,`html` = :html ,`listItems` = :listItems ,`value` = :value ,`formID` = :formID ,`objectID` = :objectID WHERE `id` = :id");
					$query->bindParam('isListType', $isListType);
					$query->bindParam('html', $html);
					$query->bindParam('listItems', $listItems);
					$query->bindParam('value', $value);
					$query->bindParam('formID', $formID);
					$query->bindParam('objectID', $objectID);
					$query->bindParam('id', $id);
					if( $query->execute() ){
						return $id;
					}else{
						return -1;
					}

				}else{
					/*Perform Insert Operation*/
					$query = $this->connection->prepare("INSERT INTO `formobjecttype` (`id`,`isListType`,`html`,`listItems`,`value`,`formID`,`objectID`) VALUES (NULL,:isListType,:html,:listItems,:value,:formID,:objectID);");
					$query->bindParam(':isListType', $isListType);
					$query->bindParam(':html', $html);
					$query->bindParam(':listItems', $listItems);
					$query->bindParam(':value', $value);
					$query->bindParam(':formID', $formID);
					$query->bindParam(':objectID', $objectID);

					if( $query->execute() ){
						$this->setId( $this->connection->lastInsertId() );
						return $this->getId();
					}else{
						return -1;
					}	
				}
			}
		}


		function delete($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("DELETE FROM `formobjecttype` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						return 1;
					}else{
						return 0;
					}
				}
			}
		}

		function getById($id){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `id` = :id LIMIT 1");
				$query->bindParam(':id', $id);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByIsListType($isListType){
			if( $this->connection ){
				if( $isListType == null && $this->getIsListType() != ""){
					$isListType = $this->getIsListType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `isListType` = :isListType LIMIT 1");
				$query->bindParam(':isListType', $isListType);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByHtml($html){
			if( $this->connection ){
				if( $html == null && $this->getHtml() != ""){
					$html = $this->getHtml();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `html` = :html LIMIT 1");
				$query->bindParam(':html', $html);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByListItems($listItems){
			if( $this->connection ){
				if( $listItems == null && $this->getListItems() != ""){
					$listItems = $this->getListItems();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `listItems` = :listItems LIMIT 1");
				$query->bindParam(':listItems', $listItems);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByValue($value){
			if( $this->connection ){
				if( $value == null && $this->getValue() != ""){
					$value = $this->getValue();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `value` = :value LIMIT 1");
				$query->bindParam(':value', $value);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByFormID($formID){
			if( $this->connection ){
				if( $formID == null && $this->getFormID() != ""){
					$formID = $this->getFormID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `formID` = :formID LIMIT 1");
				$query->bindParam(':formID', $formID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}

		function getByObjectID($objectID){
			if( $this->connection ){
				if( $objectID == null && $this->getObjectID() != ""){
					$objectID = $this->getObjectID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `objectID` = :objectID LIMIT 1");
				$query->bindParam(':objectID', $objectID);
				$object = null;

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$object = $result;
					}

				}
				if( is_object( $object ) ){
					return $object;
				}
			}
		}


		function getListById($id=null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `id` = :id");
				$query->bindParam(':id', $id);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$formobjecttypes[] = $result;
					}
					if( is_array( $formobjecttypes ) ){
						return $formobjecttypes;
					}else{
						return array();
					}

				}
			}
		}

		function getListByIsListType($isListType=null){
			if( $this->connection ){
				if( $isListType == null && $this->getIsListType() != ""){
					$isListType = $this->getIsListType();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `isListType` = :isListType");
				$query->bindParam(':isListType', $isListType);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$formobjecttypes[] = $result;
					}
					if( is_array( $formobjecttypes ) ){
						return $formobjecttypes;
					}else{
						return array();
					}

				}
			}
		}

		function getListByHtml($html=null){
			if( $this->connection ){
				if( $html == null && $this->getHtml() != ""){
					$html = $this->getHtml();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `html` = :html");
				$query->bindParam(':html', $html);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$formobjecttypes[] = $result;
					}
					if( is_array( $formobjecttypes ) ){
						return $formobjecttypes;
					}else{
						return array();
					}

				}
			}
		}

		function getListByListItems($listItems=null){
			if( $this->connection ){
				if( $listItems == null && $this->getListItems() != ""){
					$listItems = $this->getListItems();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `listItems` = :listItems");
				$query->bindParam(':listItems', $listItems);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$formobjecttypes[] = $result;
					}
					if( is_array( $formobjecttypes ) ){
						return $formobjecttypes;
					}else{
						return array();
					}

				}
			}
		}

		function getListByValue($value=null){
			if( $this->connection ){
				if( $value == null && $this->getValue() != ""){
					$value = $this->getValue();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `value` = :value");
				$query->bindParam(':value', $value);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$formobjecttypes[] = $result;
					}
					if( is_array( $formobjecttypes ) ){
						return $formobjecttypes;
					}else{
						return array();
					}

				}
			}
		}

		function getListByFormID($formID=null){
			if( $this->connection ){
				if( $formID == null && $this->getFormID() != ""){
					$formID = $this->getFormID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `formID` = :formID");
				$query->bindParam(':formID', $formID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$formobjecttypes[] = $result;
					}
					if( is_array( $formobjecttypes ) ){
						return $formobjecttypes;
					}else{
						return array();
					}

				}
			}
		}

		function getListByObjectID($objectID=null){
			if( $this->connection ){
				if( $objectID == null && $this->getObjectID() != ""){
					$objectID = $this->getObjectID();
				}

				/*Perform Query*/
				$query = $this->connection->prepare("SELECT * FROM `formobjecttype` WHERE `objectID` = :objectID");
				$query->bindParam(':objectID', $objectID);

				if( $query->execute() ){
					while( $result = $query->fetchObject("formobjecttype") ){
						$formobjecttypes[] = $result;
					}
					if( is_array( $formobjecttypes ) ){
						return $formobjecttypes;
					}else{
						return array();
					}

				}
			}
		}

		/*Return parameter (object) as Array*/
		function toArray ($obj=null) {
			if (is_object($obj)) $obj = (array)$obj;
			if (is_array($obj)) {
				$new = array();
				foreach ($obj as $key => $val) {
					$class = get_class($this);
					$k = $key;
					$fkey = trim( str_replace( $class,"",$k));
					if( $fkey == "connection" || $fkey == "errors" || $fkey == "errorCount" ){
						//dont add
					}else{
						$new[$fkey] = $this->toArray($val);
					}
				}
			} else {
				$new = $obj;
			}
			return $new;
		}

		/*Return object as Array*/
		function asArray(){
			$array = $this->toArray( $this );
			return $array;
		}

		/*Return object as JSON String*/
		function asJSON(){
			return json_encode($this->asArray());
		}

		/*Return clone of Object*/
		function getClone(){
			return clone($this);
		}


		/*Echo array as CSV file*/
		function arrayToCSVFile($array, $filename="formobjecttype.csv", $delimiter=",", $showHeader=true){
			ob_clean();
			if( !is_array($array) ){
				$array = $this->asArray();
			}
			if( !is_array($showHeader) && $showHeader == true){
				$header=array();
				foreach( $array[0] as $key => $value){
					$header[] = strtoupper($key);
				}
				array_unshift($array, $header);
			}
			if( is_array($showHeader) ){
				array_unshift($array, $showHeader);
			}
			header('Content-Type: application/csv; charset=UTF-8');
			header('Content-Disposition: attachement; filename="'.$filename.'";');
			$f = fopen('php://output', 'w');
			foreach ($array as $line) {
				fputcsv($f, $line, $delimiter);
			}
			exit;
		}


		/*getObjectsLikeThis - returns array*/
		function getObjectsLikeThis($asArray=true){
			if( $this->connection ){
				$buildQuery="SELECT * FROM `formobjecttype` WHERE ";
				$numParams = 0;
				$values = array();
				foreach ($this as $key => $value) {
					if( $value != "" && $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
						$buildQuery.="`".$key."` = :value_".$numParams." AND ";
						$numParams++;
						$values[] = $value;
					}
				}
				if( $numParams > 0 ){
					//remove last AND
					$buildQuery = substr( $buildQuery , 0, (strlen($buildQuery) -4) );
					$query = $this->connection->PREPARE($buildQuery);
					for($i=0; $i < $numParams; $i++){
						$query->bindParam(":value_".$i, $values[$i]);
					}
					if( $query->execute() ){
						if( $asArray == true ){
							return $query->fetchAll(PDO::FETCH_ASSOC);
						}else{
							$objArray = array();
							while( $result = $query->fetchObject("formobjecttype") ){
								$object = $result;
								$objArray[] = $object;
							}
							return $objArray;
						}
					}
				}
			}
		}

		/*get properties*/
		function getObjectsProperties(){
			$properties = array();
			foreach ($this as $key => $value) {
				if( $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
					$properties[] = $key;
				}
			}
			return $properties;
		}
		/*Human readable print out of object*/
		function printFormatted($return=false){
			if($return){
				return '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}else{
				echo '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}
		}

	}
?>