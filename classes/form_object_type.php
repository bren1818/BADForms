<?php
/*  Class Generated by Brendon Irwin's Class Generator

	name, v
	description, v
	isListType, i
	ordered, i

*/

	class Objecttype{
		private $id;
		private $connection;
		private $errors;
		private $errorCount;
		private $name;
		private $description;
		private $isListType;
		private $ordered;


		/*Constructor*/
		function __construct($databaseConnection=null){
			$this->connection = $databaseConnection;
		}

		/*Getters and Setters*/
		function getId(){
			return $this->id;
		}

		function setId($id){
			$this->id = $id;
		}

		function getConnection(){
			return $this->connection;
		}

		function setConnection($connection){
			$this->connection = $connection;
		}

		function getErrors(){
			return $this->errors;
		}

		function setErrors($errors){
			$this->errors = $errors;
		}

		function getErrorCount(){
			return $this->errorCount;
		}

		function setErrorCount($errorCount){
			$this->errorCount = $errorCount;
		}

		function getName(){
			return $this->name;
		}

		function setName($name){
			$this->name = $name;
		}

		function getDescription(){
			return $this->description;
		}

		function setDescription($description){
			$this->description = $description;
		}

		function getIsListType(){
			return $this->isListType;
		}

		function setIsListType($isListType){
			$this->isListType = $isListType;
		}

		function getOrdered(){
			return $this->ordered;
		}

		function setOrdered($ordered){
			$this->ordered = $ordered;
		}

		/*Special Functions*/
		function load($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("SELECT * FROM `objecttype` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						$objecttype = $query->fetchObject("objecttype");
					}
					if( is_object( $objecttype ) ){
						$objecttype->setConnection( $this->connection );
					}
					return $objecttype;
				}
			}
		}

		function getFromPost(){
			$this->setName( (isset($_POST["name"])) ? $_POST["name"] : $this->getName() );
			$this->setDescription( (isset($_POST["description"])) ? $_POST["description"] : $this->getDescription() );
			$this->setIsListType( (isset($_POST["isListType"])) ? $_POST["isListType"] : $this->getIsListType() );
			$this->setOrdered( (isset($_POST["ordered"])) ? $_POST["ordered"] : $this->getOrdered() );
		}

		function getFromRequest(){
			$this->setName( (isset($_REQUEST["name"])) ? $_REQUEST["name"] : $this->getName() );
			$this->setDescription( (isset($_REQUEST["description"])) ? $_REQUEST["description"] : $this->getDescription() );
			$this->setIsListType( (isset($_REQUEST["isListType"])) ? $_REQUEST["isListType"] : $this->getIsListType() );
			$this->setOrdered( (isset($_REQUEST["ordered"])) ? $_REQUEST["ordered"] : $this->getOrdered() );
		}

		function save(){
			$id = $this->getId();
			$name = $this->getName();
			$description = $this->getDescription();
			$isListType = $this->getIsListType();
			$ordered = $this->getOrdered();
			if( $this->connection ){
				if( $id != "" ){
					/*Perform Update Operation*/
					$query = $this->connection->prepare("UPDATE  `objecttype` SET `name` = :name ,`description` = :description ,`isListType` = :isListType ,`ordered` = :ordered WHERE `id` = :id");
					$query->bindParam('name', $name);
					$query->bindParam('description', $description);
					$query->bindParam('isListType', $isListType);
					$query->bindParam('ordered', $ordered);
					$query->bindParam('id', $id);
					if( $query->execute() ){
						return $id;
					}else{
						return -1;
					}

				}else{
					/*Perform Insert Operation*/
					$query = $this->connection->prepare("INSERT INTO `objecttype` (`id`,`name`,`description`,`isListType`,`ordered`) VALUES (NULL,:name,:description,:isListType,:ordered);");
					$query->bindParam(':name', $name);
					$query->bindParam(':description', $description);
					$query->bindParam(':isListType', $isListType);
					$query->bindParam(':ordered', $ordered);

					if( $query->execute() ){
						$this->setId( $this->connection->lastInsertId() );
						return $this->getId();
					}else{
						return -1;
					}	
				}
			}
		}


		function delete($id = null){
			if( $this->connection ){
				if( $id == null && $this->getId() != ""){
					$id = $this->getId();
				}

				/*Perform Query*/
				if( $id != "" ){
					$query = $this->connection->prepare("DELETE FROM `objecttype` WHERE `id` = :id");
					$query->bindParam(':id', $id);
					if( $query->execute() ){
						return 1;
					}else{
						return 0;
					}
				}
			}
		}

		/*Return parameter (object) as Array*/
		function toArray ($obj=null) {
			if (is_object($obj)) $obj = (array)$obj;
			if (is_array($obj)) {
				$new = array();
				foreach ($obj as $key => $val) {
					$class = get_class($this);
					$k = $key;
					$fkey = trim( str_replace( $class,"",$k));
					if( $fkey == "connection" || $fkey == "errors" || $fkey == "errorCount" ){
						//dont add
					}else{
						$new[$fkey] = $this->toArray($val);
					}
				}
			} else {
				$new = $obj;
			}
			return $new;
		}

		/*Return object as Array*/
		function asArray(){
			$array = $this->toArray( $this );
			return $array;
		}

		/*Return object as JSON String*/
		function asJSON(){
			return json_encode($this->asArray());
		}

		/*Return clone of Object*/
		function getClone(){
			return clone($this);
		}


		/*Echo array as CSV file*/
		function arrayToCSVFile($array, $filename="objecttype.csv", $delimiter=",", $showHeader=true){
			ob_clean();
			if( !is_array($array) ){
				$array = $this->asArray();
			}
			if( !is_array($showHeader) && $showHeader == true){
				$header=array();
				foreach( $array[0] as $key => $value){
					$header[] = strtoupper($key);
				}
				array_unshift($array, $header);
			}
			if( is_array($showHeader) ){
				array_unshift($array, $showHeader);
			}
			header('Content-Type: application/csv; charset=UTF-8');
			header('Content-Disposition: attachement; filename="'.$filename.'";');
			$f = fopen('php://output', 'w');
			foreach ($array as $line) {
				fputcsv($f, $line, $delimiter);
			}
			exit;
		}


		/*getObjectsLikeThis - returns array*/
		function getObjectsLikeThis($asArray=true){
			if( $this->connection ){
				$buildQuery="SELECT * FROM `objecttype` WHERE ";
				$numParams = 0;
				$values = array();
				foreach ($this as $key => $value) {
					if( $value != "" && $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
						$buildQuery.="`".$key."` = :value_".$numParams." AND ";
						$numParams++;
						$values[] = $value;
					}
				}
				if( $numParams > 0 ){
					//remove last AND
					$buildQuery = substr( $buildQuery , 0, (strlen($buildQuery) -4) );
					$query = $this->connection->PREPARE($buildQuery);
					for($i=0; $i < $numParams; $i++){
						$query->bindParam(":value_".$i, $values[$i]);
					}
					if( $query->execute() ){
						if( $asArray == true ){
							return $query->fetchAll(PDO::FETCH_ASSOC);
						}else{
							$objArray = array();
							while( $result = $query->fetchObject("objecttype") ){
								$object = $result;
								$objArray[] = $object;
							}
							return $objArray;
						}
					}
				}
			}
		}

		/*get properties*/
		function getObjectsProperties(){
			$properties = array();
			foreach ($this as $key => $value) {
				if( $key != "id" && $key != "connection" && $key != "error" && $key != "errorCount"){
					$properties[] = $key;
				}
			}
			return $properties;
		}
		/*Human readable print out of object*/
		function printFormatted($return=false){
			if($return){
				return '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}else{
				echo '<pre>'.print_r( $this->asArray(), true ).'</pre>';
			}
		}

	}
?>